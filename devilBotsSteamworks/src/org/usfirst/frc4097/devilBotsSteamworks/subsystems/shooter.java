// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4097.devilBotsSteamworks.subsystems;

import org.usfirst.frc4097.devilBotsSteamworks.RobotMap;
import org.usfirst.frc4097.devilBotsSteamworks.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem; 
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;


/**
 *
 */
public class shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController shooterMotor = RobotMap.shootershooterMotor;
    private final SpeedController speedAccuator = RobotMap.shooterspeedAccuator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    int cnt = 0;
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void takeJoytickInput(Joystick main){
    
    	
    	
    	if(main.getRawButton(6)){
    		shooterMotor.set(1);
    		cnt = 1;
    		
    		while(cnt<10000){
    			cnt++;
    		}
    	}
    	else if(main.getRawButton(8)){
    		shooterMotor.set(-0.5);
    	}
    	else{
    		shooterMotor.stopMotor();
    	}
    	// Above is for shooter, Below for Hopper
    	if(main.getRawButton(5)){
    		speedAccuator.set(-1.0);
    	}
    	else{
    		speedAccuator.stopMotor();
    	}
    	
    	
    }
    public void stop(){
    	shooterMotor.stopMotor();
    }
    
    
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new controlShooter());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public abstract class Shooter extends PIDSubsystem{
    	SpeedController motor = RobotMap.shootershooterMotor;
    	AnalogInput pot = RobotMap.shooterPot();
    	public Shooter() {
    		super("Motor Speed", 2.0, 0.0, 0.0);
    		setAbsoluteTolerance(0.05);
    		getPIDController().setContinuous(false);
    	}
    	public void initDefaultCommand() {
        }

        protected double returnPIDInput() {
        	return pot.getAverageVoltage();
        }

        protected void usePIDOutput(double output) {
        	motor.pidWrite(output);
        }
    }
    }

